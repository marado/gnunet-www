{% extends "common/base.j2" %}
{% block body_content %}
<article class="container">

  <header>
    <h1>{{ _("GNUnet's Google Summer of Code projects") }}</h1>
  </header>

  <div class="row">
    <div class="col-2 d-none d-lg-block"><!-- for large viewports show menu for better orientation -->
      <nav class="nav subnav position-fixed flex-column border-right" style="position:fixed">
      <a class="nav-link" href="#current">{{ _("Ideas 2021") }}</a>
      <!--<a class="nav-link" href="#past">{{ _("Past projects") }}</a>-->
      <a class="nav-link" href="#finished">{{ _("Finished projects") }}</a>
      </nav>
    </div>
    <div class="col">

      <section>
        <p>
        {% trans %}
          As a GNU project, GNUnet has participated in the Google Summer of Code (GSoC) for a number of years. This page lists all current, past, and finished projects.
          If you want to participate and apply for any of the ideas for 2020 below or any past project which is not yet finished (or even your own idea), please contact us either in IRC or mailing list.
        {% endtrans %}
        </p>
      </section>


      <h2><a name="current" class="subnav-anchor"></a>{{ _("Ideas 2021") }}</h2>

      <section>
        <h4>Transport Next Generation (TNG): Communicator plugins</h4>
        <p>
          {% trans %}
            The GNUnet team is currently working on a transport layer rewrite
            in order to fix core issues with connectivity.
            This new component is currently developed under the name "TNG".
            What is currently known as "transport plugins" will in the TNG
            be represented as "communicators".

            Communicators are processes with a well defined API that allow
            to connect peers over a specific protocol.
            The primary protocol which are already implemented are UNIX sockets,
            UDP sockets, and TCP sockets.

            For a truly resilient network, other connectivity options such as
            WiFi mesh, Bluetooth, HTTP(S), QUIC or even more obscure alternatives
            such as radio are required.

            In this project, the goal is to select, implement and test new
            communicators.
            While TNG is not yet ready, communicators can, by design, be developed
            and tested against the current API.

            We expect that this project can be worked on by multiple students
            as there are a lot of protocols to choose from.
            The tasks would consist of:
            <ol>
              <li>Deciding which communicators to implement.</li>
              <li>Test the communicators.</li>
              <li>Documentation.</li>
            </ol>
            Advantageous skills/languages/frameworks:
            <ol>
              <li>C</li>
              <li>Knowledge of HTTPS, QUIC, Bluetooth or WiFi.</li>
            </ol>
            <br/>
            <strong>Difficulty:</strong> Average, but depends on selected protocols.
            <br/>
            <strong>Mentors:</strong> Martin Schanzenbach, t3sserakt
          {% endtrans %}
        </p>
      </section>

      <section>
        <h4>REST: Multi-user support</h4>
        <p>
          {% trans %}
            The REST API currently only supports a single user system.
            This is an issue as on multi-user systems, access control
            must be enfoced on a per-user basis.

            In this project, the REST service must be extended to
            support user authentication.
            This includes the correct handling of user context switches.
            <ol>
              <li>Implement user authentication.</li>
              <li>Test the access control.</li>
              <li>Document the changes to the REST API.</li>
            </ol>
            Advantageous skills/languages/frameworks:
            <ol>
              <li>C</li>
              <li>Knowledge of user authentication subsystems on Linux/Unix.</li>
              <li>REST/HTTP Authentication methods</li>
            </ol>
            <br/>
            <strong>Difficulty:</strong> Beginner
            <br/>
            <strong>Mentors:</strong> Martin Schanzenbach
          {% endtrans %}
        </p>
      </section>



      <section>
        <h4>re:claimID/GNUnet Browser Plugin</h4>
        <p>
          {% trans %}
            reclaimID is a decentralized identity system build on top of the GNU
            Name System.
            Currently, there is a Webextension which uses the GNUnet <a href="https://rest.gnunet.org">REST API</a>.
            In order to improve adoption and ease of use, this project aims to include
            a full GNUnet node within the Webextention as a fallback.
            GNUnet can be compiled to Web Assembly or JavaScript as demonstrated
            <a href="https://gnunet.io">here</a>.
            The idea is to improve upon this concept and support more of GNUnet's
            subsystems.

            The difficulty of this project largely depends on the students
            proficiency with build tools, emscripten and improvisation skills.
            There non-exhaustive task list would be:
            <ol>
              <li>Improve existing GNUnet emscripten build to include more subsystems.</li>
              <li>Integrate the result into a Webextention.</li>
              <li>Integrate the result into the re:claimID Webextension</li>
            </ol>
            Advantageous skills/languages/frameworks:
            <ol>
              <li>C</li>
              <li>emscripten</li>
              <li>Webextensions</li>
            </ol>
            <br/>
            <strong>Difficulty:</strong> Challenging
            <br/>
            <strong>Mentors:</strong> Martin Schanzenbach
          {% endtrans %}
        </p>
      </section>

      <section>
        <h4>Canonical statistics identifier</h4>
        <p>
          {% trans %}
            Currently, the keys in our statistics database are too verbose.
            For example:
        </p>
        <p>
          nse # flood messages received: 13<br/>
          nse # peers connected: 4<br/>
          nse # nodes in the network (estimate): 203<br/>
          nse # flood messages started: 5<br/>
          nse # estimated network diameter: 3<br/>
          nse # flood messages transmitted: 10<br/>
        </p>
        <p>
           With such verbose keys there's no easy way to form compact JSON
           document or entries for time-series database.
           And you can't query single stats without having to copypaste the line
           exactly and put in quotes.
            In short, the goals are to...
            <ol>
              <li>Think of a way how statistics entries can be made canonical.</li>
              <li>Implement the change and migrate existing uses.</li>
              <li>Document the format(s) and define an appropriate registration mechanism for identifiers</li>
            </ol>
            Relevant bugs: <a href="https://bugs.gnunet.org/view.php?id=5650">#5650</a><br/>
            Advantageous skills/languages/frameworks:
            <ol>
              <li>C</li>
              <li>HTML</li>
            </ol>
            <br/>
            <strong>Difficulty:</strong> Beginner
            <br/>
            <strong>Mentors:</strong> Martin Schanzenbach
          {% endtrans %}
        </p>
      </section>

      <!-- Past projects: Previously proposed, but left unfinished. Inspiration for students. -->
      <!--<h2><a name="past" class="subnav-anchor"></a>{{ _("Past projects") }}</h2>
      <p>
        Past projects: Previously proposed, but left unfinished. Inspiration for students.
      </p>
            <section>
        <h4>Android Port</h4>
        <p>
          {% trans %}
            It is time for GNUnet to run properly on Android.  Note that
            GNUnet is written in C, and this is not about rewriting
            GNUnet in Java, but about getting the C code to run on Android.
          {% endtrans %}
        </p>
        <p>
          {% trans %}
            Includes: Implementation of rudimentary Android compatibility for GNUnet,
            in part by porting the GNUnet utils scheduler to act as
            a thin wrapper over libuv.
          {% endtrans %}
        </p>
        <p>
          {% trans %}
            <strong>Mentors:</strong> <a href="https://www.goebel-consult.de/">Hartmut Goebel</a>, Jeff Burdges, Christian Grothoff
          {% endtrans %}
        </p>
      </section>

      <section>
        <h4>Help with Continuous Integration setup</h4>
        <p>
          {% trans %}
            There is a push for migrating our CI to Gitlab.  The CI should
            eventually not just run "make check" on various platforms, but also
            perform tests with multiple peers running in different VMs with
            specific network topologies (i.e. NAT) between them being simulated.
            The CI should also be integrated with Gauger for performance
            regression analysis.  Running jobs only when dependencies have changed
            and scripting more granular triggers or ideally automatic dependency
            discovery (as done by the autotools) is also important.
          {% endtrans %}
        </p>
        <p>
          {% trans %}
            <strong>Mentors:</strong> TBD
          {% endtrans %}
        </p>
      </section>


      <section>
        <h4>Enable all networking applications to run over GNUnet out of the box</h4>
        <p>
          {% trans %}
            One great problem of the current Internet is the lack of
            disintermediation. When people want to talk they need a
            chat service. When they want to share files they need a
            file transfer service. Although GNUnet already possesses
            quite advanced integration into Linux networking, a little
            extra work is needed for existing applications like irc,
            www, ftp, rsh, nntpd to run over it in a peer-to-peer way,
            simply by using a GNS hostname like friend.gnu. Once
            people have added a person to their GNS they can
            immediately message, exchange files and suchlike directly,
            with nothing but the GNUnet in the middle, using
            applications that have been distributed with unix systems
            ever since the 1980's. We can produce an OS distribution
            where these things work out of the box with the nicknames
            of people instead of cloud services. For more information
            and context, read
          {% endtrans %}
            <a href="https://bugs.gnunet.org/view.php?id=4625">bug id 4625</a>.
        </p>
        <p>
          {% trans %}
            <strong>Mentors:</strong> lynX &amp; dvn
          {% endtrans %}
        </p>
      </section>
      <section>
        <h4>Rust APIs for GNUnet services</h4>
        <p>
          {% trans %}
            There are a variety of GNUNet APIs that should be
            exposed in the Rust wrappers.  Implementing these will
            require extending the port of GNUNet utils written by
            Andrew Cann and Kelong Cong.
          {% endtrans %}
        </p>
        <p>
          {% trans %}
            As an introduction to the code base, we suggest that the
            student and Jeff Burdges together update the
            asynchronous IO system from gjio to futures-rs or
            another layer built upon it.  Jeff Burdges is expected
            to concurrently be implementing a GNUNet API for his own
            mix network work.
          {% endtrans %}
        </p>
        <p>
          {% trans %}
            <strong>Mentors:</strong> Jeff Burdges
          {% endtrans %}
        </p>
        <p>
          {% trans %}
            Required Skills: Rust
          {% endtrans %}
        </p>
        <p>
          {% trans %}
            Difficulty level: low
          {% endtrans %}
        </p>
      </section>
      <section>
        <h4>Tor compatibility for GNUnet</h4>
        <p>
          {% trans %}
            Implement the AnycastExit spec to enable GNUnet clients
            to connect over Tor.
          {% endtrans %}
        </p>
        <p>
          {% trans %}
            <strong>Mentors:</strong> Jeff Burdges
          {% endtrans %}
        </p>
        <p>
          {% trans %}
            Note: There was a Special TLDs spec to allow Tor to
            resolve domain names using GNS over Tor too, but
            currently that's on hold until folks think more about
            how names should be moved around the local system. We're
            calling this more collaborative approach NSS2 for now.
          {% endtrans %}
        </p>
        <p>
          {% trans %}
            Required Skills: C
          {% endtrans %}
        </p>
        <p>
          {% trans %}
            Difficulty level: medium
          {% endtrans %}
        </p>
      </section>
      <section>
        <h4>Rust implementation of GNUnet utils</h4>
        <p>
          {% trans %}
            Improve the Rust implementation of GNUnet utils, possibly
            including adding support for asynchronous IO using mio, or
            perhaps a higher level asynchronous IO library built upon
            it, such as rotor, mioco, eventual_io, or gj.
          {% endtrans %}
        </p>
        <p>
          {% trans %}
            <strong>Mentors:</strong> Jeff Burdges
          {% endtrans %}
        </p>
      </section>
      <section>
        <h4>Implementation of a replacement for PANDA</h4>
        <p>
          {% trans %}
            Implementation of a replacement for PANDA (see Pond)
            with better security, and maybe integration with the GNU
            Name System for key exchange.
          {% endtrans %}
        </p>
        <p>
          {% trans %}
            <strong>Mentors:</strong> Jeff Burdges
          {% endtrans %}
        </p>
        <p>
          {% trans %}
            Required Skills: Rust or C, crypto
          {% endtrans %}
        </p>
        <p>
          {% trans %}
            Difficulty level: high
          {% endtrans %}
        </p>
      </section>
      <section>
        <h4>secushare: Implement social networking features on top of pubsub channels</h4>
        <p>
          {% trans %}
            Implement different place types and file sharing by
            creating a new place for the shared content.
          {% endtrans %}
        </p>
        <p>
          {% trans %}
            Place types to be implemented:
          {% endtrans %}
        </p>
        {% trans %}
        <ul>
          <li>File: generic file with comments</li>
          <li>Image: display an image with comments referencing a region of the image</li>
          <li>Sound: play a sound file with comments referencing a timestamp</li>
          <li>Directory/Album: pointers to File / Image / Sound places</li>
          <li>Event: with RSVP</li>
          <li>Survey: ask your social neighborhood questions in a structured form</li>
        </ul>
        {% endtrans %}
        <p>
          {% trans %}
            Also provide the following UI functionality:
          {% endtrans %}
        </p>
        {% trans %}
        <ul>
          <li>Fork existing channels, reorganize people into new chatrooms or channels.</li>
          <li>Share a post (edit and repost something elsewhere, on a fan page for example).</li>
          <li>Edit a previously published post + offer edit history to readers.</li>
          <li>Control expiry of channel history.</li>
        </ul>
        {% endtrans %}
        <p>
          {% trans %}
            See also <a href="http://secushare.org/features">http://secushare.org/features</a>
          {% endtrans %}
        </p>
        <p>
          {% trans %}
            <strong>Mentors:</strong> lynX
          {% endtrans %}
        </p>
        <p>
          {% trans %}
            Required Skills: C/C++
          {% endtrans %}
        </p>
        <p>
          {% trans %}
            Difficulty level: high
          {% endtrans %}
        </p>
      </section>
      <section>
        <h4>secushare: Implement a Social Graph API for contact adoption and more</h4>
        <p>
          {% trans %}
            Implement aggregation of distributed state from
            various channels
            in order to provide for a powerful social graph API capable of
            producing social network profiles, dashboards,
            a calendar out of
            upcoming event invitations (if available),
            social search functionality
            and most of all to make it easy for users to
            adopt cryptographic
            identities of their contacts/friends simply by finding
            them in the
            social graph of their
            existing contacts ("This is Linda. You have 11
            contacts in common with her. [ADD]").
          {% endtrans %}
        </p>
        <p>
          {% trans %}
            Related to
            <a href="http://secushare.org/rendezvous">secushare.org/rendezvous</a>
          {% endtrans %}
        </p>
        <p>
          {% trans %}
            <strong>Mentors:</strong> t3sserakt, lynX
          {% endtrans %}
        </p>
        <p>
          {% trans %}
            Required Skills: C
          {% endtrans %}
        </p>
        <p>
          {% trans %}
            Difficulty level: high
          {% endtrans %}
        </p>
      </section>
      <section>
        <h4>secushare: Implement integration with tradition e-mail</h4>
        {% trans %}
          <ul>
            <li>
              Emulate IMAP/SMTP protocols as necessary to transform
              traditional mail clients into secushare user
              interfaces.
            </li>
            <li>
              Think of ways to map e-mail addresses to secushare
              identities.
            </li>
            <li>
              Encode or translate various e-mail features into
              secushare equivalents.
            </li>
            <li>
              Parts of secushare are currently written in Rust,
              therefore Rust is preferred for this task but it is
              not an requirement.
            </li>
          </ul>
        {% endtrans %}
        <p>
          {% trans %}
            <strong>Mentors:</strong> t3sserakt, lynX
          {% endtrans %}
        </p>
        <p>
          {% trans %}
            Required Skills: C
          {% endtrans %}
        </p>
        <p>
          {% trans %}
            Difficulty level: high
          {% endtrans %}
        </p>
      </section>
      <section>
        <h4>GNUnet auction</h4>
        <p>
          {% trans %}
            Implementation of the GNUnet auction system described in
            Chapter 3 of
            <a href="https://grothoff.org/christian/teich2017ms.pdf">this thesis</a>.
            Specific tasks are adding smart
            contract creation and round time enforcement to
            libbrandt as well as creating the
            GNUnet auction service, library and the three user interface
            programs create, info and join.
          {% endtrans %}
        </p>
        <p>
          {% trans %}
            <strong>Mentors:</strong> mate, cg
          {% endtrans %}
        </p>
        <p>
          {% trans %}
            Required Skills: C
          {% endtrans %}
        </p>
        <p>
          {% trans %}
            Difficulty level: medium
          {% endtrans %}
        </p>
      </section>
      <section>
        <h4>Implementation of additional transports</h4>
        <p>
          {% trans %}
            Implementation of additional transports to make GNUnet communication
            more robust in the presence of problematic networks:
            GNUnet-over-SMTP, GNUnet-over-DNS
          {% endtrans %}
        </p>
        <p>
          {% trans %}
            <strong>Mentors:</strong> Matthias Wachs
          {% endtrans %}
        </p>
      </section>
      <section>
        <h4>Implementation of ALG-based NAT traversal methods</h4>
        <p>
          {% trans %}
            Implementation of ALG-based NAT traversal methods (FTP/SIP-based hole
            punching, better STUN support)
          {% endtrans %}
        </p>
        <p>
          {% trans %}
            <strong>Mentors:</strong> Matthias Wachs
          {% endtrans %}
        </p>
      </section>
      <section>
        <h4>Integration of the GNU Name System with GnuPG</h4>
        <p>
          {% trans %}
            <strong>Mentors:</strong> Matthias Wachs, Christian Grothoff, Jeff Burdges
          {% endtrans %}
        </p>
      </section>
      <section>
        <h4>libaboss improvements</h4>
        <p>
          {% trans %}
            Improving libaboss to make computation on shared secrets (including
            repeated multiplication) based
            on <a href="https://dl.acm.org/citation.cfm?doid=62212.62213">Ben-Or
            et al.</a> if possible.  This in particular means moving libaboss to
            bignums (gcry_mpi).
          {% endtrans %}
        </p>
        <p><strong>Mentors:</strong> Krista Grothoff, Jeff Burdges</p>
      </section>
      <section>
        <h4>Supporting GNU Guix's package distribution</h4>
        <p>
          {% trans %}
            Please refer to the description for this project listed under
            GNU Guix project ideas.
          {% endtrans %}
        </p>
      </section>
      -->
      <h2><a name="finished" class="subnav-anchor"></a>{{ _("Finished projects") }}</h2>
      <!-- Commentary: Finished projects, descriptions and Links to write-ups about them. -->
      <h3>2019</h3>
      <section>
        <h4>Migrate gnunet-qr from Python 2.7 to C using libzbar</h4>
        <p>
          {% trans %}
            Python 2.7 is reaching its end-of-life, and we want to get rid
            of the dependency on Python. The existing gnunet-qr tool is a
            rather simple wrapper around python-zbar, which itself wraps
            libzbar. The goal of this project is to directly use libzbar
            to scan QR codes for GNUnet / the GNU Name System (see
            also <a href="https://bugs.gnunet.org/view.php?id=5562">#5562</a>).
            {% endtrans %}
        </p>
        <p>
          {% trans %}
            <strong>Mentors:</strong> Christian Grothoff
          {% endtrans %}
        </p>
        <p>
          {% trans %}
            Required Skills:
          {% endtrans %}
        </p>
        <p>
          {% trans %}
            Difficulty level:
          {% endtrans %}
        </p>
        <p>
          {% trans %}
            Report:
          {% endtrans %}
        </p>
        <p>
          {% trans %}
            Unfinished/Abandoned as gnunet-qr was moved to C outside of GSoC.
          {% endtrans %}
        </p>
      </section>

      <h3>2018</h3>
      <section>
        <h4>GNUnet Web-based User Interface</h4>
        <p>
          {% trans %}
            Implementation of a Web-based UI for GNUnet similar to
            GNUnet-Gtk with a yet to be determined framework such as
            Angular2. This includes the design and implementation of
            not yet existing <a href="http://jsonapi.org/">REST APIs</a>
            that expose the
            <a href="https://docs.gnunet.org/doxygen/modules.html">GNUnet API</a>.
          {% endtrans %}
        </p>
        <p>
          {% trans %}
            <strong>Mentors:</strong> Martin Schanzenbach
          {% endtrans %}
        </p>
        <p>
          {% trans %}
            Required Skills: C, JavaScript, CSS
          {% endtrans %}
        </p>
        <p>
          {% trans %}
            Difficulty level: medium
          {% endtrans %}
        </p>
        <p>
          {% trans %}
            Report: <a href="gsoc-2018-gnunet-webui.html">GSoC 2018: GNUnet WebUI</a>
          {% endtrans %}
        </p>
      </section>

    </div>
  </div>

</article>
{% endblock body_content %}
