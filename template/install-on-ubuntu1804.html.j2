{% extends "common/base.j2" %}
{% block body_content %}
<article class="container">

  <header>
    <h1>{{ _("Tutorial: GNUnet on Ubuntu 18.04") }}</h1>
  </header>

  <h2>{{ _("Introduction") }}</h2>
  <p>
  Welcome to the hopefully painless GNUnet tutorial for Ubuntu 18.04!
  It provides very concrete instructions on how to compile, install
  and configure a current version of GNUnet. The goal is to support
  newcomers, either end users or developers, who want to get in touch
  with GNUnet for the first time. After installing GNUnet we will make
  sure that out new GNUnet installation is working correctly.
  </p>
  <p>
  <b>Attention: If you came across the official gnunet package for
     Ubuntu 18.04, ignore it! It is ancient and not compatible with
     current GNUnet installations.</b>
  </p>
  <p>
  Now let's start!
  </p>
  <h2>{{ _("Requirements") }}</h2>
  <p>
    First let's install the following Ubuntu 18.04 packages to use
    GNUnet painlessly. Optional dependencies are listed in Appendix
    A. They are required for some experimental GNUnet features.
  </p>
  <code>
      $ sudo apt install git libtool autoconf autopoint \<br>
      build-essential libgcrypt-dev libidn11-dev zlib1g-dev \<br>
      libunistring-dev libglpk-dev miniupnpc libextractor-dev \<br>
      libjansson-dev libcurl4-gnutls-dev gnutls-bin libsqlite3-dev \<br>
      openssl libnss3-tools libmicrohttpd-dev libopus-dev libpulse-dev \<br>
      libogg-dev
  </code>

  <h2>{{ _("Make an installation directory") }}</h2>
  <p>
    Next we create a directory in our home directory where we store
    the source code later. We should keep this directory after
    installation because it contains Makefiles that can be used for
    uninstalling GNUnet again (see chapter *Uninstall GNUnet and its
    dependencies*).
  </p>
  <code>
    $ mkdir ~/gnunet_installation
  </code>

  <h2>{{ _("Get the source code") }}</h2>
  <p>
    We download the GNUnet source code using git.
  </p>
  <code>
    $ cd ~/gnunet_installation<br>
    $ git clone --depth 1 https://gnunet.org/git/gnunet.git<br>
  </code>
  <h2>{{ _("Compile and Install") }}</h2>
  <p>
    Installing GNUnet is not hard. We have two options:
    installing a *production version* and installing a *development version*. If
    you want to start writing GNUnet applications or join the GNUnet development
    choose the development version (it will print more debug output and contains
    debug symbols that can be displayed with a debugger). Otherwise choose the
    production version.
  </p>
  <h3>{{ _("Option 1: GNUnet for production / usage") }}</h3>
  <code>
    $ cd ~/gnunet_installation/gnunet<br>
    $ ./bootstrap<br>
    $ ./configure --prefix=$GNUNET_PREFIX --disable-documentation --with-microhttpd=/opt/libmicrohttpd<br>
    $ sudo addgroup gnunetdns<br>
    $ sudo adduser --system --group --disabled-login --home /var/lib/gnunet gnunet<br>
    $ make -j$(nproc || echo -n 1)<br>
    $ sudo make install
  </code>
  <h3>{{ _("Option 2: GNUnet for development") }}</h3>

  <code>
    $ cd ~/gnunet_installation/gnunet<br>
    $ ./bootstrap<br>
    $ export CFLAGS="-g -Wall -O0"<br>
    $ ./configure --prefix=$GNUNET_PREFIX --disable-documentation --enable-logging=verbose <br>
    $ make -j$(nproc || echo -n 1)<br>
    $ sudo make install
  </code>

  <!--
<h3>{{ _("Install GNUnet plugin for name resolution") }}</h3>
      So now it gets a bit nasty. It's not so bad. All we have to do is copy a file and edit another one. The file we need to copy is GNUnet's plugin for the Name Service Switch (NSS) in unix systems. Different unixes expect it in different locations and GNUnet's build system does not try to guess. On Ubuntu 18.04 we have to do

      <code>
	  $ sudo cp /usr/lib/gnunet/nss/libnss_gns.so.2 /lib/$(uname -m)-linux-gnu/
      </code>

  <p>The next step is activating the GNUnet plugin we just copied in the NSS
    config. It is located in `/etc/nsswitch.conf`. It should contain a line
    starting with "hosts" similar to this (at least "files" and "dns" should be
    there):</p>

  <code>
      $ cat /etc/nsswitch.conf<br>
      hosts: files mdns4_minimal [NOTFOUND=return] dns
  </code>

  <p><b>Attention: Once we modified `etc/nsswitch.conf` DNS resolution will only
      be possible as long as is GNUnet is running. We can leave the next step out,
      but then we will not be able to use GNUnet's name resolution in external
      applications.</b></p>

  <p>We save a copy of the original file and then modify the line using sed:</p>

  <code>
      $ sudo cp /etc/nsswitch.conf /etc/nsswitch.conf.original<br>
      $ sudo sed -i -E 's/^(hosts:.*) dns/\1 gns [NOTFOUND=return] dns/' /etc/nsswitch.conf 
  </code>

  <p>Now in the line starting with "hosts" should contain an entry "gns [NOTFOUND=return]" before the "dns" entry like this:</p>

  <code>
      hosts: files mdns4_minimal [NOTFOUND=return] gns [NOTFOUND=return] dns
  </code>

  <p>That's it. It wasn't that nasty, was it?</p>
-->
  <h2>{{ _("Configuration") }}</h2>

  <p>
    Congratulations! GNUnet is now installed! Before we start it we
    need to create a configuration file. By default GNUnet looks in
    our home directory for the file `~/.config/gnunet.conf`. We can
    start with an empty file for now:
  </p>
 <br />
  <code>
    $ touch ~/.config/gnunet.conf
  </code>
 <br />
  <p>
    It's reccomended that you increase your bandwidth restrictions
    from the acutely low defaults. The example below sets the WAN
    and LAN limits to the value "unlimited".
  </p>
 <br />
  <code>
    $ gnunet-config -s ats -o WAN_QUOTA_IN -V unlimited<br />
    $ gnunet-config -s ats -o WAN_QUOTA_OUT -V unlimited<br /> 
    $ gnunet-config -s ats -o LAN_QUOTA_IN -V unlimited<br />
    $ gnunet-config -s ats -o LAN_QUOTA_OUT -V unlimited<br /> 
  </code>
 <br />
  <p>
    Now we can start it with the command line tool `gnunet-arm`
    (Automatic Restart Manager).
  </p>

  <code>
    $ gnunet-arm -s
  </code>

  <p>
    It starts the default GNUnet services. We can list them with the `-I` option:
  </p>

  <code>
    $ gnunet-arm -I<br>
    Running services:<br>
    ats (gnunet-service-ats)<br>
    revocation (gnunet-service-revocation)<br>
    set (gnunet-service-set)<br>
    nat (gnunet-service-nat)<br>
    transport (gnunet-service-transport)<br>
    peerstore (gnunet-service-peerstore)<br>
    hostlist (gnunet-daemon-hostlist)<br>
    identity (gnunet-service-identity)<br>
    namecache (gnunet-service-namecache)<br>
    peerinfo (gnunet-service-peerinfo)<br>
    datastore (gnunet-service-datastore)<br>
    zonemaster (gnunet-service-zonemaster)<br>
    zonemaster-monitor (gnunet-service-zonemaster-monitor)<br>
    nse (gnunet-service-nse)<br>
    cadet (gnunet-service-cadet)<br>
    dht (gnunet-service-dht)<br>
    core (gnunet-service-core)<br>
    gns (gnunet-service-gns)<br>
    statistics (gnunet-service-statistics)<br>
    topology (gnunet-daemon-topology)<br>
    fs (gnunet-service-fs)<br>
    namestore (gnunet-service-namestore)<br>
    vpn (gnunet-service-vpn)
  </code>

  <p>
    For stopping GNUnet again we can use the `-e` option.
  </p>

  <code>
    $ gnunet-arm -e
  </code>
  <h2>{{ _("Use GNUnet!") }}</h2>
   <p>
	Please head over here: <a href="https://gnunet.org/en/use.html">Use!</a>
   <p>

  <h2>{{ _("Uninstall GNUnet and its dependencies") }}</h2>

  <code>
    $ cd ~/gnunet_installation/gnunet<br>
    $ sudo make uninstall<br>
    $ cd ~/gnunet_installation/libmicrohttpd<br>
    $ sudo make uninstall<br>
    $ sudo apt remove git libtool autoconf autopoint build-essential libgcrypt-dev libidn11-dev zlib1g-dev libunistring-dev libglpk-dev miniupnpc libextractor-dev libjansson-dev libcurl4-gnutls-dev libsqlite3-dev<br>
    $ sudo apt autoremove<br>
    $ sudo userdel -r gnunet<br>
    $ sudo groupdel gnunet<br>
    $ sudo groupdel gnunetdns<br>
    $ sudo mv /etc/nsswitch.conf.original /etc/nsswitch.conf<br>
    $ sudo rm /lib/$(uname -m)-linux-gnu/libnss_gns.so.2
  </code>

  <h2>{{ _("Troubleshooting") }}</h2>
  <h3>{{ _("You can't reach other people's nodes") }}</h3>

  <p>
    Should our computer not have reached the open GNUnet network automatically,
    we can manually instruct our node how to reach the nodes of our friends. This
    works by exchanging HELLO strings. This is how we get a hello string for our
    computer.
  </p>

  <code>
    $ gnunet-peerinfo -gn
  </code>

  <p>
    We can now pass this string to our friends "out of band" (using whatever
    existing chat or messaging technology). If the string contains some private IP
    networks we don't want to share, we can carefully edit them out.
  </p>

  <p>
    Once we receive such strings from our friends, we can add them like
    this:
  </p>

  <code>
    gnunet-peerinfo -p <string>
  </code>
  
  <p>Now our GNUnet nodes can attempt reaching each other directly. This may
    still fail due to NAT traversal issues.</p>

  <!--<h3>{{ _("OMG you guys broke my internet") }}</h3>

      <p>We can replace `/etc/nsswitch.conf` with the backup we made earlier
	(`/etc/nsswitch.conf.original`). Now DNS resolution should work again without a
	running GNUnet.</p>

      <code>
	$ cp /etc/nsswitch.conf.original /etc/nsswitch.conf
      </code>-->
</article>
{% endblock body_content %}
